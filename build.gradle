apply plugin: 'java-library'

static String envOr(String key, String presentPrefix = "", Object or = "") {
    def env = System.getenv()
    if (env.containsKey(key))
        return presentPrefix + env.get(key)
    return or
}

def getCommitTimestampMinutes() {
    // Run 'git log' command to get the timestamp of the latest commit
    def result = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%ct'
        standardOutput = result
    }

    // Convert the timestamp to minutes
    def timestampSeconds = result.toString().trim().toLong()
    def timestampMinutes = timestampSeconds / 60

    return (int) timestampMinutes
}

ext {
    buildId = getCommitTimestampMinutes()
}
task tcBuildId {
    doLast {
        println "##teamcity[buildNumber '$buildId']"
    }
}
tasks.named('jar').configure { dependsOn tcBuildId }
group 'org.comroid'
version '2.1' + '.' + buildId

apply from: 'gradle/vars.gradle'

sourceCompatibility = 17
targetCompatibility = 17

jar {
    dependsOn test
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

tasks.withType(Javadoc) {
    source = sourceSets.main.java

    options {
        encoding = 'UTF-8'
        /*
        links = [
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://docs.oracle.com/javaee/7/api/"
        ]
        */
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava

    try {
        archiveClassifier.set 'sources'
    } catch (MissingPropertyException ignored) {
        classifier = "sources"
    }
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir

    try {
        archiveClassifier.set 'javadoc'
    } catch (MissingPropertyException ignored) {
        classifier = "javadoc"
    }
}

compileJava.options.encoding = 'UTF-8'

repositories {
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenLocal()
    maven { url 'https://www.jitpack.io' }
    mavenCentral()
}

dependencies {
    // annotations
    api 'org.jetbrains:annotations:24.1.0'

    // soft dependencies
    compileOnly 'org.slf4j:slf4j-api:1.+'

    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.+'
    compileOnly 'antlr:antlr:2.7.7'

    compileOnly 'com.rabbitmq:amqp-client:5.18.0'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.+'
    compileOnly 'org.apache.tomcat:tomcat-annotations-api:10.+'

    compileOnly 'net.dv8tion:JDA:5.+'

    compileOnly 'net.kyori:adventure-api:4.11.+'
    compileOnly 'net.kyori:adventure-platform-bungeecord:4.3.3'

    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly "net.luckperms:api:5.4"

    compileOnly('net.fabricmc.fabric-api:fabric-api-base:0.4.31+1802ada577') { transitive = false }
    compileOnly 'me.lucko:fabric-permissions-api:0.3.1'

    // lombok
    api 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:+'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.easymock:easymock:+'
}

apply from: 'gradle/publishing.gradle'
