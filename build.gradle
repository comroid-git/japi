import java.time.Instant

static int getCommitTimestampMinutes() {
    def result = new StringBuilder()
    var proc = 'git log -1 --format=%ct'.execute()
    proc.consumeProcessOutputStream(result)
    proc.waitFor()

    long seconds
    if (result.toString().isBlank())
        seconds = (long) (Instant.now().toEpochMilli() / 1000)
    else seconds = result.toString().trim().toLong()
    return (int) seconds / 600
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'

group 'org.comroid'
version '2.3.' + getCommitTimestampMinutes()

configurations.compileClasspath.resolutionStrategy.activateDependencyLocking()

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    // annotations
    api 'org.jetbrains:annotations:24.1.0'

    // soft dependencies
    compileOnly 'org.slf4j:slf4j-api:1.+'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'

    compileOnly 'org.yaml:snakeyaml:+'

    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.+'
    compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.+'
    compileOnly 'antlr:antlr:2.7.7'

    compileOnly 'com.rabbitmq:amqp-client:5.18.0'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.+'
    compileOnly 'org.apache.tomcat:tomcat-annotations-api:10.+'

    compileOnly 'net.dv8tion:JDA:5.+'

    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'net.kyori:adventure-api:4.11.+'
    compileOnly 'net.kyori:adventure-platform-bungeecord:4.3.3'

    // lombok
    api 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:+'

    compileOnly 'org.junit.jupiter:junit-jupiter-api:+'
    testImplementation 'org.easymock:easymock:+'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:+'
    testCompileOnly 'junit:junit:+'
}

publishing {
    repositories.mavenLocal()

    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = project.name
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "burdoto"
                        name = "Kaleidox"
                        email = "contact@kaleidox.de"
                    }
                }
            }
        }
    }
}

jar.finalizedBy publishToMavenLocal
